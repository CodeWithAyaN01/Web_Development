****************************Prg1 Kruskal******************************

#include<stdio.h>
int cost[10][10],n;

void kruskal()
{
    int p[n];
    int a=0,b=0,u=0,v=0, mincost = 0, ne = 0;
    int min;

    for(int i=0;i<n;i++)
        p[i]=-1;

    printf("the minimum spanning tree edges are...");
    while(ne < n-1) // ne starts from 0
    {
        //Find the least cost edge
        min = 999;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                if(cost[i][j] < min)
                {
                    min=cost[i][j];
                    a=u=i;
                    b=v=j;
                }

        //Check if edge select cause cyclicity?
        while(p[u]!=-1)
            u=p[u];

        while(p[v]!=-1)
            v=p[v];

        if(u!=v)
        {
            printf("From vertex %d to vertex %d and the cost = %d\n",a,b,min);
            mincost+=min;
            p[v]=u; // yaad
            ne++;
        }
        //edge included in MST should not be considered for next iteration
        cost[a][b]=cost[b][a]=999;
    }
    printf("Cost of MST = %d", mincost);
}

void main()
{
    printf("Enter the no. of vertices:");
    scanf("%d",&n);
    printf("Enter the cost matrix\n");
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            scanf("%d",&cost[i][j]);

    kruskal();
}


****************************Prg2 Prims******************************

#include<stdio.h>
// undirected graph;
// matrix is tellig the cost b/w vertex

int cost[10][10];
int n;

void prim()
{
    int vt[10]={0}; // tracks included array vertex
    int a=0,b=0, mincost = 0, ne = 0;
    int min;

    vt[0] = 1; //  1st vertex as visited

    while( ne < n-1 )
    {
        min = 999;
        for (int i = 0; i<n; i++)
        {
            if(vt[i]==1)
                for(int j = 0;j <n; j++)
                    if((cost[i][j] < min) && (vt[j]==0))
                    {
                        min = cost[i][j];
                        a = i;
                        b = j;
                    }
        }
        printf("Edge from vertex %d to vertex %d and the cost %d\n",a,b,min);
        vt[b] = 1;
        ne++;
        mincost += min;
        cost[a][b] = cost[b][a] = 999;
    }
    printf("minimum spanning tree cost is %d",mincost);
}

void main()
{
    printf("Enter the no. of vertices: ");
    scanf("%d",&n);
    printf("Enter the cost matrix\n");
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            scanf("%d",&cost[i][j]);
    prim();
}



****************************Prg3 Floyed and Warshal******************************


#include<stdio.h>

int min(int a, int b)
{
    return(a < b ? a : b);
}

void floyd(int D[][10],int n)
{
    for(int k=1;k<=n;k++)
        for(int i=1;i<=n;i++)
            for(int j=1;j<=n;j++)
                D[i][j]=min(D[i][j],D[i][k]+D[k][j]);
}

void warshal(int A[][10],int n)
{
    for(int k=1;k<=n;k++)
        for(int i=1;i<=n;i++)
            for(int j=1;j<=n;j++)
                A[i][j]=A[i][j] || (A[i][k] && A[k][j]);
}

int main()
{
    int n, cost[10][10];
    printf("Enter no. of Vertices: ");
    scanf("%d",&n);
    printf("Enter the cost matrix\n");
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
            scanf("%d",&cost[i][j]);
    floyd(cost,n);

    printf("All pair shortest path\n");
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
            printf("%d  ",cost[i][j]);
        printf("\n");
    }
}


****************************Prg4 Dijkstra******************************

#include<stdio.h>

int cost[10][10];
int n;
int dist[10];


int minm(int m, int n)
{
    return(( m < n) ? m : n);
}

void dijkstra(int source)
{
    int s[10]={0};
    int min;
    int w = 0;

    for(int i=0;i<n;i++)
        dist[i]=cost[source][i];

    dist[source] = 0;
    s[source] = 1;

    for(int i=0; i<n-1; i++)
    {
        min = 999;
        for(int j = 0; j < n; j++)
        {
            if ( (s[j] == 0 ) && (min > dist[j]))
            {
                min = dist[j];
                w = j; // used w for updating
            }
        }
        s[w]=1;
        for(int v=0;v<n;v++)
        {
            if(s[v]==0 && cost[w][v]!=999)
            {
                dist[v]= minm(dist[v],dist[w]+cost[w][v]);
            }
        }
    }
}

int main()
{
    int source;

    printf("Enter the no.of vertices:");
    scanf("%d",&n);

    printf("Enter the cost matrix\n");
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            scanf("%d",&cost[i][j]);

    printf("Enter the source vertex:");
    scanf("%d",&source);

    dijkstra(source);

    printf("the shortest distance is...");
    for(int i=0; i<n; i++)
        printf("Cost from %d to %d is %d\n",source,i,dist[i]);
}


****************************Prg5 Topological******************************


#include<stdio.h>
int cost[10][10],n,colsum[10];

void cal_colsum()
{
    for(int j=0;j<n;j++)
    {
        colsum[j]=0;
        for(int i=0;i<n;i++)
            colsum[j]+=cost[i][j];
    }
}

void source_removal()
{
    int i,j,k;
    int select[10]={0};

    printf("Topological ordering is:");
    for(i=0;i<n;i++)
    {
        cal_colsum();
        for(j=0;j<n;j++)
        {
            if(select[j]==0 && colsum[j]==0) //source vertex
                break;
        }
        printf("%d ",j);
        select[j]=1;

        for(k=0;k<n;k++) // do this too
            cost[j][k]=0;
    }
}

void main()
{
    printf("Enter no. of Vertices: ");
    scanf("%d",&n);

    printf("Enter the cost matrix\n");
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            scanf("%d",&cost[i][j]);

    source_removal();
}

****************************Prg6 KnapsackDP******************************


#include<stdio.h>
int n,m;
int p[10];
int w[10];
// int main loop -  for(i = 1 ; i<= n ;i++)
int max(int a, int b)
{
    return(a>b?a:b);
}
void knapsack_DP()
{
    int V[10][10],i,j;
    for(i=0;i<=n;i++)
        for(j=0;j<=m;j++)
            if(i==0 || j==0)
                V[i][j]=0;
            else if(j < w[i] )//weight of the item is larger than capacity
                V[i][j]=V[i-1][j];
            else
                V[i][j]=max(V[i-1][j],p[i]+V[i-1][j-w[i]]);

    for(i=0;i<=n;i++) //  PRINTING
    {
        for(j=0;j<=m;j++)
            printf("%d  ",V[i][j]);
        printf("\n");
    }
    /* tracking back the optimal solution vector */
    printf("Items included are:");
    while(n > 0)
    {
        if(V[n][m] != V[n-1][m])
        {
            printf("%d  ",n);
            m = m - w[n];
        }
        n--; //  ye dekh
    }
}
int main() {
    int i;
    printf("Enter the no. of items: ");
    scanf("%d",&n);


    printf("Enter the weights of n items: ");
    for(i=1;i<=n;i++)
        scanf("%d",&w[i]);


    printf("Enter the prices of n items: ");
    for(i=1;i<=n;i++)
        scanf("%d",&p[i]);


    printf("Enter the capacity of Knapsack: ");
    scanf("%d",&m);
    knapsack_DP();
}


****************************Prg7 kanp Greedy******************************
#include<stdio.h>

int n,m,p[10],w[10];
void greedy_knapsack()
{
    float max, profit=0;
    int k=0,i,j;
    printf("item included is :");
    for(i=0;i<n;i++)
    {
        max=0;
        //choose the item which has highest price to weight ratio
        for(j=0;j<n;j++)
        {
            if(((float)p[j])/w[j] > max)
            {
                k=j;
                max=((float)p[j])/w[j];
            }
        }
        //kth element has highest price to weight ratio
        if(w[k] <= m )
        {
            printf("%d",k);
            m = m - w[k];
            profit=profit+p[k];
            p[k]=0;
        }
        else
            break;//unable fit item k into knapsack
    }
    printf("Discrete Knapsack profit = %f\n",profit);
    printf("Continuous Knapsack also includes item %d with portion: %f\n", k, ((float)m)/w[k]);
    profit = profit + ((float)m)/w[k] * p[k];
    printf("Continuous Knapsack profit = %f\n",profit);
}

int main()
{
    int i;
    printf("Enter the no. of items: ");
    scanf("%d",&n);
    printf("Enter the weights of n items: ");
    for(i=0;i<n;i++)
        scanf("%d",&w[i]);
    printf("Enter the prices of n items: ");
    for(i=0;i<n;i++)
        scanf("%d",&p[i]);
    printf("Enter the capacity of Knapsack: ");
    scanf("%d",&m);
    greedy_knapsack();
}

****************************Prg8 subset******************************


#include<stdio.h>

int x[10], w[10], count, d;
void sum_of_subsets(int s, int k, int rem)
{
    x[k] = 1;
    if( s + w[k] == d)
    {
        //if subset found
        printf("subset = %d\n", ++count);
        for(int i=0 ; i <= k ; i++)
            if ( x[i] == 1)
                printf("%d  ",w[i]);
        printf("\n");
    }
    else if ( s + w[k] + w[k+1] <= d )//left tree evaluation
        sum_of_subsets(s+w[k], k+1, rem-w[k]);

    if( ( s+rem-w[k] >= d) && ( s + w[k+1]) <= d)//right tree evaluation
    {
        x[k] = 0;
        sum_of_subsets(s,k+1,rem-w[k]);
    }
}

int main()
{
    int sum = 0,n;
    printf("enter no of elements:");
    scanf("%d",&n);
    printf("enter the elements in increasing order:");
    for( int i = 0; i < n ; i++)
    {
        scanf("%d",&w[i]);
        sum=sum+w[i];
    }
    printf("eneter the target sum:");
    scanf("%d",&d);

    if ( ( sum < d ) || ( w[0] > d ) )
        printf("No subset possible\n");
    else
        sum_of_subsets(0,0,sum);
}


****************************Prg9 Selection******************************


#include<stdio.h>
#include<stdlib.h>
#include<time.h>

int a[10000],n,count = 0;

void selection_sort()
{
    for(int i=0;i<n-1;i++) //  n-1
    {
        int min = i; //  watch here

        for(int j=i+1;j<n;j++)
        {
            count++;
            if(a[j]<a[min]) { //  watch here
                min=j;
            }
        }
        int temp=a[i];
        a[i]=a[min];
        a[min]=temp;
    }
}

int main()
{
    printf("Enter the number of elements in an array:");
    scanf("%d",&n);
    printf("All the elements:");
    for(int i=0;i<n;i++)
    {
        a[i]=rand();
        printf("%d ",a[i]);
    }
    selection_sort();
    printf("\nAfter sorting\n");
    for(int i=0;i<n;i++)
        printf("%d  ", a[i]);
    printf("\nNumber of basic operations = %d\n",count);
}


****************************Prg10 Quick******************************


#include<stdio.h>
#include<stdlib.h>
#include<time.h>

int count=0;
int partition(int a[], int low,int high)
{
    int pivot=a[low];
    int i = low+1;
    int j = high;
    int temp;
    while(1)
    {

        while(i<=high && a[i]<=pivot)
        {
            i++; count++;
        }

        while(j>0 && a[j]>pivot)
        {
            j--; count++;
        }

        count+=2;

        if(i<j)
        {
            temp = a[i];
            a[i] = a[j];
            a[j] =temp;
        }
        else if(i>j)
        {
            temp = a[low];
            a[low] = a[j];
            a[j] = temp;
            return j;
        }
        else
            return j;
    }
}

void quicksort(int a[],int low, int high)
{
    int s;
    if(low<high)
    {
        //partition to place pivot element in between left and right group
        s = partition(a,low,high);
        quicksort(a,low,s-1);
        quicksort(a,s+1,high);
    }
}
int main()
{
    int a[10000],n;
    printf("Enter the number of elements in an array:");
    scanf("%d",&n);
    printf("All the elements:");
    for(int i=0;i<n;i++)
    {
        a[i]=rand();
        printf("%d ",a[i]);
    }
    quicksort(a,0,n-1);
    printf("\nAfter sorting\n");
    for(int i=0;i<n;i++)
        printf("%d  ", a[i]);
    printf("\nNumber of basic operations = %d\n",count);
}



****************************Prg11 Merge******************************


#include<stdio.h>
#include<stdlib.h>
#include<time.h>

int count=0;
void merge(int a[], int low,int mid,int high)
{
    int i,j,k,c[10000];

    i=low, j=mid+1, k=0;

    while((i<=mid) && (j<=high))
    {
        count++;

        if(a[i]<a[j])
            c[k++]=a[i++];
        else
            c[k++]=a[j++];
    }

    while(i<=mid)
        c[k++]=a[i++];
    while(j<=high)
        c[k++]=a[j++];

    for(i=low,j=0;j<k;i++, j++)
        a[i]=c[j];
}

void merge_sort(int a[], int low, int high)
{
    int mid;
    if(low < high)
    {

        mid=(low+high)/2;
        merge_sort(a,low,mid);
        merge_sort(a,mid+1,high);
        merge(a,low,mid,high);
    }
}

int main()
{
    int a[10000],n,i;
    printf("Enter the number of elements in an array:");
    scanf("%d",&n);
    printf("All the elements:");
    for(i=0;i<n;i++)
    {
        a[i]=rand() % 100;
        printf("%d ",a[i]);
    }
    merge_sort(a,0,n-1);
    printf("\nAfter sorting\n");
    for(i=0;i<n;i++)
        printf("%d  ", a[i]);
    printf("\nNumber of basic operations = %d\n",count);
}



****************************Prg12 N Queens******************************


#include<stdio.h>
#include<math.h>      //for abs() function

int place(int x[],int k)
{
    for(int i=1;i<k;i++)
    {
        if( (x[i] == x[k]) || ( abs(x[i]-x[k]) == abs(i-k)) )
            return 0;
    }
    return 1; //feasible
}

int nqueens(int n)
{
    int x[10], k, count=0;

    k=1;// select the first queen
    x[k]=0; //no positions allocated
    while(k != 0)  // until all queens are present
    {
        x[k]++;      // place the kth queen in next column
        while((x[k] <= n)  && (!place(x,k)))
            x[k]++;     // check for the next column to place queen

        if(x[k] <= n)
        {
            if(k == n)   // all queens are placed
            {
                printf("\nSolution %d\n",++count);
                for(int i=1;i <= n;i++)
                {
                    for(int j=1;j <= n;j++)
                        printf("%c ",j==x[i]?'Q':'X');
                    printf("\n");
                }
            }
            else
            {
                ++k;   //select the next queen
                x[k]=0;    // start from the next column
            }
        }
        else
            k--;              // backtrack
    }
    return count;
}

void main()
{
    int n;
    printf("Enter the size of chessboard: ");
    scanf("%d",&n);
    printf("\nThe number of possibilities are %d",nqueens(n));
}






