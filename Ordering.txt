//  topological ordering 

#include<stdio.h>

int cost[10][10], n , colsum[10];

void cal_colsum()
{
    for (int j = 0 ; j<n ; j++)
    {
        colsum[j] = 0;
        for(int i = 0 ; i < n ; i++)
        {
            colsum[j] += cost[i][j];
        }
    }
}

void source_removal()
{
    int i,j,k,select[10] = {0};
    
    printf("Topolgical ordering is ;");
    for (int i = 0 ; i< n; i ++)
    {
        cal_colsum();
        
        for (int j = 0 ; j< n ;j++)
        {
            if(select[j] == 0 && colsum[j] == 0)
                break;
        }
        printf("%d ",j);
        select[j] = 1;
        for (k = 0 ; k< n; k++)
        {
            cost[j][k] = 0;
        }
    }
}

void main()  
{ 
    printf("Enter no. of Vertices: "); 
    scanf("%d",&n); 
    printf("Enter the cost matrix\n"); 
    for(int i=0;i<n;i++) 
        for(int j=0;j<n;j++) 
            scanf("%d",&cost[i][j]); 
    source_removal(); 
}


// prism


#include <stdio.h>

int cost[10][10], n;

void prism()
{
    int vt[10] = {0};
    int a = 0, b = 0, min, mincost = 0, ne = 0;
    vt[0] = 1;

    while (ne < n - 1)
    {
        min = 999;
        for (int i = 0; i < n; i++)
        {
            if (vt[i] == 1)
            {
                for (int j = 0; j < n; j++)
                {
                    if (cost[i][j] < min && vt[j] == 0)
                    {
                        min = cost[i][j];
                        a = i;
                        b = j;
                    }
                }
            }
        }
        
        if (min == 999) {
            printf("Graph is disconnected.\n");
            return;
        }

        printf("Edge from vertex %d to vertex %d and the cost = %d\n", a, b, min);
        vt[b] = 1;
        ne++;
        mincost += min;
        cost[a][b] = cost[b][a] = 999;
    }

    printf("Tree cost is %d\n", mincost);
}

void main()
{
    printf("Enter vertices: ");
    scanf("%d", &n);  // use global n

    printf("Enter cost matrix:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &cost[i][j]);

    prism();
}


//floyed


#include<stdio.h> 
 
int min(int a, int b) 
{ 
        return(a < b ? a : b); 
} 
 
void floyd(int D[][10],int n) 
{ 
    for(int k=1;k<=n;k++) 
        for(int i=1;i<=n;i++) 
            for(int j=1;j<=n;j++) 
                D[i][j]=min(D[i][j],D[i][k]+D[k][j]); 
} 
     
int main()  
{ 
    int n, cost[10][10]; 
    printf("Enter no. of Vertices: "); 
    scanf("%d",&n); 
    printf("Enter the cost matrix\n"); 
    for(int i=1;i<=n;i++) 
     for(int j=1;j<=n;j++) 
            scanf("%d",&cost[i][j]); 
    floyd(cost,n); 
         
    printf("All pair shortest path\n"); 
    for(int i=1;i<=n;i++) 
    {             
  for(int j=1;j<=n;j++) 
            printf("%d  ",cost[i][j]); 
        printf("\n"); 
    } 
}


// warshal 

#include<stdio.h> 
 
void warshal(int A[][10],int n) 
{ 
    for(int k=1;k<=n;k++) 
        for(int i=1;i<=n;i++) 
            for(int j=1;j<=n;j++) 
                A[i][j]=A[i][j] || (A[i][k] && A[k][j]); 
} 
     
void main()  
{ 
    int n, adj[10][10]; 
    printf("Enter no. of Vertices: "); 
    scanf("%d",&n); 
    printf("Enter the adjacency matrix\n"); 
    for(int i=1;i<=n;i++) 
        for(int j=1;j<=n;j++) 
            scanf("%d",&adj[i][j]); 
    warshal(adj,n); 
         
    printf("Transitive closure of the given graph is\n"); 
    for(int i=1;i<=n;i++) 
    {             
 for(int j=1;j<=n;j++) 
            printf("%d  ",adj[i][j]); 
        printf("\n"); 
    } 
}












