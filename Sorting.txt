SELECTION SORT

#include <stdio.h>
#include<stdlib.h>

int a[1000] , n;
int count  = 0;

void selection_sort()
{
    for (int i = 0 ; i< n-1 ; i++)
    {
        int min = i;
        for (int j = i + 1 ; j<n ; j++)
        {
            count++;
            if (a[j] <a[min])
            {
                min = j;
            }
            
        }
	int temp = a[i];
        a[i] = a[min];
        a[min] = temp;
    }
}

int main()
{
    printf("enter the number of elem: ");
    scanf("%d",&n);
    printf("All the elem: ");
    for (int i = 0 ; i< n ; i++)
    {
        a[i] = rand() % 100;
        printf("%d ",a[i]);
    }
    selection_sort();
    printf("\nAfter sorting: ");
    for (int i = 0 ; i< n ; i++)
    {
        printf("%d ",a[i]);
    }
    printf("\nNumber of basic operations = %d\n",count);
}



QUICK SORT


// quick short

 
#include<stdio.h> 
#include<stdlib.h>

int count = 0;

int partition(int a[] , int low ,int high)
{
    int pivot = a[low];
    int i = low+1;
    int j = high;
    int temp;
    
    while(1)
    {
        while (i<=high && a[i] <= pivot)
        {
            i++;
            count++;
        }
        
        while (j>0 && a[j]>pivot)
        {
            j--;
            count++;
        }
        count += 2;
        
        if (i<j)
        {
            temp = a[i];
            a[i] = a[j];
            a[j] = temp;
        }
        else if(i>j)
        {
            temp = a[low]; 
            a[low] = a[j]; 
            a[j] = temp; 
            return j;
        }
        else
            return j;
    }
}


void quick_sort(int a[] , int low,int high)
{
    int s;
    if (low<high)
    {
        s = partition(a,low,high);
        quick_sort(a,low,s-1);
        quick_sort(a,s+1,high);
    }
}

int main() 
{ 
     int a[10000],n; 
     printf("Enter the number of elements in an array:"); 
     scanf("%d",&n); 
     printf("All the elements:"); 
     for(int i=0;i<n;i++) 
     { 
          a[i]=rand()%50; 
          printf("%d ",a[i]); 
     } 
     quick_sort(a,0,n-1); 
     printf("\nAfter sorting\n"); 
     for(int i=0;i<n;i++) 
        printf("%d  ", a[i]); 
     printf("\nNumber of basic operations = %d\n",count); 
}



MERGE SORT


// merge sort

#include<stdio.h> 
#include<stdlib.h>
int count = 0;
void merge(int a[], int low,int mid,int high)
{
    int i,j,k,c[10000];
    
    i = low;
    j = mid+1;
    k = 0;
    
    while (i<=mid && j<=high)
    {
        count++;
        if(a[i] < a[j])
            c[k++] = a[i++];
        else
            c[k++] = a[j++];
    }
    
    while (i<=mid)
        c[k++] = a[i++];
        
    while(j<=high)
        c[k++] = a[j++];
        
    for(i = low,j=0;j<k;j++,i++)
        a[i] = c[j];
}

void merge_sort(int a[], int low, int high)
{
    int mid;
    if(low < high)
    {
        mid = (low+high)/2;
        merge_sort(a,low,mid);
        merge_sort(a,mid+1,high);
        merge(a,low,mid,high);
    }
}
int main()
{
    int a[10000],n,i; 
 printf("Enter the number of elements in an array:"); 
 scanf("%d",&n); 
 printf("All the elements:");
 for(i=0;i<n;i++) 
 { 
  a[i]=rand() % 100; 
  printf("%d ",a[i]); 
 } 
 merge_sort(a,0,n-1); 
 printf("\nAfter sorting\n"); 
 for(i=0;i<n;i++) 
  printf("%d  ", a[i]); 
 printf("\nNumber of basic operations = %d\n",count); 
}
















